/* eslint-disable handle-callback-err */
/*
 * This file (which will be your service worker)
 * is picked up by the build system ONLY if
 * quasar.conf > pwa > workboxPluginMode is set to "InjectManifest"
 */
import { precacheAndRoute } from 'workbox-precaching'

// Precache files generated by the build process.
precacheAndRoute(self.__WB_MANIFEST)

// O resto do seu código de service worker.
self.addEventListener('install', (event) => {
  console.log('Service Worker: Installed')
  self.skipWaiting() // Atualize imediatamente
})

self.addEventListener('activate', (event) => {
  console.log('Service Worker: Activated')
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== 'v1') {
            console.log('Service Worker: Clearing Old Cache')
            return caches.delete(cache)
          }
        })
      )
    })
  )
  self.clients.claim() // Assuma o controle imediatamente
})

self.addEventListener('fetch', (event) => {
  event.respondWith(
    fetch(event.request)
      .then((res) => {
        const resClone = res.clone()
        caches.open('v1').then((cache) => {
          cache.put(event.request, resClone)
        })
        return res
      })
      .catch((err) => caches.match(event.request).then((res) => res))
  )
})

// Força a atualização imediata ao detectar um novo service worker
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})
